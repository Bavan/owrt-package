From 66fd1d830e0164468320a37b38a1805efb4da21a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Kristoffer=20Gr=C3=B6nlund?= <krig@koru.se>
Date: Fri, 22 Nov 2013 11:09:39 +0100
Subject: [PATCH 125/179] MEDIUM: systemd-wrapper: Kill child processes when
 interrupted

Send SIGINT to child processes when killed. This ensures that
the haproxy process managed by the systemd-wrapper is stopped
when "systemctl stop haproxy.service" is called.
---
 src/haproxy-systemd-wrapper.c | 20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/src/haproxy-systemd-wrapper.c b/src/haproxy-systemd-wrapper.c
index 6546616..d337f4c 100644
--- a/src/haproxy-systemd-wrapper.c
+++ b/src/haproxy-systemd-wrapper.c
@@ -83,7 +83,7 @@ static int read_pids(char ***pid_strv)
 	return read;
 }
 
-static void signal_handler(int signum __attribute__((unused)))
+static void sigusr2_handler(int signum __attribute__((unused)))
 {
 	int i;
 	char **pid_strv = NULL;
@@ -96,6 +96,21 @@ static void signal_handler(int signum __attribute__((unused)))
 	free(pid_strv);
 }
 
+static void sigint_handler(int signum __attribute__((unused)))
+{
+	int i, pid;
+	char **pid_strv = NULL;
+	int nb_pid = read_pids(&pid_strv);
+	for (i = 0; i < nb_pid; ++i) {
+		pid = atoi(pid_strv[i]);
+		if (pid > 0) {
+			kill(pid, SIGINT);
+			free(pid_strv[i]);
+		}
+	}
+	free(pid_strv);
+}
+
 static void init(int argc, char **argv)
 {
 	while (argc > 1) {
@@ -117,7 +132,8 @@ int main(int argc, char **argv)
 
 	init(argc, argv);
 
-	signal(SIGUSR2, &signal_handler);
+	signal(SIGINT, &sigint_handler);
+	signal(SIGUSR2, &sigusr2_handler);
 
 	spawn_haproxy(NULL, 0);
 	while (-1 != wait(NULL) || errno == EINTR);
-- 
1.8.1.5

