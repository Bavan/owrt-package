From 34c2fb6f89a0d73c91627bc9f75f3921d8e6af7c Mon Sep 17 00:00:00 2001
From: Willy Tarreau <w@1wt.eu>
Date: Mon, 2 Dec 2013 23:29:05 +0100
Subject: [PATCH 145/179] BUG/MINOR: config: report the correct track-sc number
 in tcp-rules

When parsing track-sc* actions in tcp-request rules, we now automatically
compute the track-sc identifier number using %d when displaying an error
message. But the ID has become wrong since we introduced sc0, we continue
to report id+1 in error messages causing some confusion.

No backport is needed.
---
 include/proto/proto_tcp.h | 2 +-
 src/cfgparse.c            | 8 ++++----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/include/proto/proto_tcp.h b/include/proto/proto_tcp.h
index 4644452..af7e28a 100644
--- a/include/proto/proto_tcp.h
+++ b/include/proto/proto_tcp.h
@@ -60,7 +60,7 @@ static inline struct stktable_key *addr_to_stktable_key(struct sockaddr_storage
 }
 
 /* for a tcp-request action TCP_ACT_TRK_*, return a tracking index starting at
- * zero for SC1. Unknown actions also return zero.
+ * zero for SC0. Unknown actions also return zero.
  */
 static inline int tcp_trk_idx(int trk_action)
 {
diff --git a/src/cfgparse.c b/src/cfgparse.c
index c87ca4b..7f521b1 100644
--- a/src/cfgparse.c
+++ b/src/cfgparse.c
@@ -6498,7 +6498,7 @@ int check_config_validity()
 			if (!target) {
 				Alert("Proxy '%s': unable to find table '%s' referenced by track-sc%d.\n",
 				      curproxy->id, trule->act_prm.trk_ctr.table.n,
-				      1 + tcp_trk_idx(trule->action));
+				      tcp_trk_idx(trule->action));
 				cfgerr++;
 			}
 			else if (target->table.size == 0) {
@@ -6509,7 +6509,7 @@ int check_config_validity()
 			else if (!stktable_compatible_sample(trule->act_prm.trk_ctr.expr,  target->table.type)) {
 				Alert("Proxy '%s': stick-table '%s' uses a type incompatible with the 'track-sc%d' rule.\n",
 				      curproxy->id, trule->act_prm.trk_ctr.table.n ? trule->act_prm.trk_ctr.table.n : curproxy->id,
-				      1 + tcp_trk_idx(trule->action));
+				      tcp_trk_idx(trule->action));
 				cfgerr++;
 			}
 			else {
@@ -6537,7 +6537,7 @@ int check_config_validity()
 			if (!target) {
 				Alert("Proxy '%s': unable to find table '%s' referenced by track-sc%d.\n",
 				      curproxy->id, trule->act_prm.trk_ctr.table.n,
-				      1 + tcp_trk_idx(trule->action));
+				      tcp_trk_idx(trule->action));
 				cfgerr++;
 			}
 			else if (target->table.size == 0) {
@@ -6548,7 +6548,7 @@ int check_config_validity()
 			else if (!stktable_compatible_sample(trule->act_prm.trk_ctr.expr,  target->table.type)) {
 				Alert("Proxy '%s': stick-table '%s' uses a type incompatible with the 'track-sc%d' rule.\n",
 				      curproxy->id, trule->act_prm.trk_ctr.table.n ? trule->act_prm.trk_ctr.table.n : curproxy->id,
-				      1 + tcp_trk_idx(trule->action));
+				      tcp_trk_idx(trule->action));
 				cfgerr++;
 			}
 			else {
-- 
1.8.1.5

